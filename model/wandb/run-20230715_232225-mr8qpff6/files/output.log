
  0%|                                                                                                                                                                                  | 0/21810 [00:00<?, ?it/s][WARNING|logging.py:295] 2023-07-15 23:22:28,694 >> `use_cache=True` is incompatible with gradient checkpointing. Setting `use_cache=False`...
  0%|                                                                                                                                                                       | 1/21810 [00:03<20:31:10,  3.39s/it]Traceback (most recent call last):
  File "/home/eli.richmond/reu/train_gptj_toolformer.py", line 702, in <module>
    main()
  File "/home/eli.richmond/reu/train_gptj_toolformer.py", line 639, in main
    train_result = trainer.train(resume_from_checkpoint=checkpoint)
  File "/home/eli.richmond/miniconda3/envs/py310/lib/python3.10/site-packages/transformers/trainer.py", line 1664, in train
    return inner_training_loop(
  File "/home/eli.richmond/miniconda3/envs/py310/lib/python3.10/site-packages/transformers/trainer.py", line 1940, in _inner_training_loop
    tr_loss_step = self.training_step(model, inputs)
  File "/home/eli.richmond/miniconda3/envs/py310/lib/python3.10/site-packages/transformers/trainer.py", line 2751, in training_step
    loss = self.deepspeed.backward(loss)
  File "/home/eli.richmond/miniconda3/envs/py310/lib/python3.10/site-packages/deepspeed/utils/nvtx.py", line 15, in wrapped_fn
    ret_val = func(*args, **kwargs)
  File "/home/eli.richmond/miniconda3/envs/py310/lib/python3.10/site-packages/deepspeed/runtime/engine.py", line 1895, in backward
    self.optimizer.backward(loss, retain_graph=retain_graph)
  File "/home/eli.richmond/miniconda3/envs/py310/lib/python3.10/site-packages/deepspeed/runtime/zero/stage_1_and_2.py", line 1902, in backward
    self.loss_scaler.backward(loss.float(), retain_graph=retain_graph)
  File "/home/eli.richmond/miniconda3/envs/py310/lib/python3.10/site-packages/deepspeed/runtime/fp16/loss_scaler.py", line 63, in backward
    scaled_loss.backward(retain_graph=retain_graph)
  File "/home/eli.richmond/miniconda3/envs/py310/lib/python3.10/site-packages/torch/_tensor.py", line 487, in backward
    torch.autograd.backward(
  File "/home/eli.richmond/miniconda3/envs/py310/lib/python3.10/site-packages/torch/autograd/__init__.py", line 200, in backward
    Variable._execution_engine.run_backward(  # Calls into the C++ engine to run the backward pass
  File "/home/eli.richmond/miniconda3/envs/py310/lib/python3.10/site-packages/torch/autograd/function.py", line 274, in apply
    return user_fn(self, *args)
  File "/home/eli.richmond/miniconda3/envs/py310/lib/python3.10/site-packages/torch/utils/checkpoint.py", line 157, in backward
    torch.autograd.backward(outputs_with_grad, args_with_grad)
  File "/home/eli.richmond/miniconda3/envs/py310/lib/python3.10/site-packages/torch/autograd/__init__.py", line 200, in backward
    Variable._execution_engine.run_backward(  # Calls into the C++ engine to run the backward pass
torch.cuda.OutOfMemoryError: CUDA out of memory. Tried to allocate 1024.00 MiB (GPU 0; 31.75 GiB total capacity; 27.01 GiB already allocated; 645.50 MiB free; 30.05 GiB reserved in total by PyTorch) If reserved memory is >> allocated memory try setting max_split_size_mb to avoid fragmentation.  See documentation for Memory Management and PYTORCH_CUDA_ALLOC_CONF